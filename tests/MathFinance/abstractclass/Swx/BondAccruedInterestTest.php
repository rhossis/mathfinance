<?php
namespace rhossis\mathfinance\MathFinance\abstractclass\Swx;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-05-10 at 17:14:09.
 */
class BondAccruedInterestTest extends \PHPUnit\Framework\TestCase
{
  /**
     * @var BondAccruedInterest
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() : void
    {
        $this->object = new BondAccruedInterest;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() : void
    {
    }
    
    
    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::compareDateMin
     */
    public function testCompareDateMin()
    {
        $expectedDate = new \DateTime('2013-11-12');
        $biggerDate = $this->object->compareDateMin(new \DateTime('2013-11-12'), new \DateTime('2014-03-27'));
        $this->assertEquals($expectedDate, $biggerDate);
    }
    

    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::compareDateMax
     */
    public function testCompareDateMax()
    {
        $expectedDate = new \DateTime('2014-03-27');
        $biggerDate = $this->object->compareDateMax(new \DateTime('2013-11-12'), new \DateTime('2014-03-27'));
        $this->assertEquals($expectedDate, $biggerDate);
    }
    
    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::getUltimo
     */
    public function testGetUltimo()
    {
        $this->assertEquals(28, $this->object->getUltimo(2014, 2)->format('j'));
        $this->assertEquals(29, $this->object->getUltimo(2016, 2)->format('j'));
        $this->assertEquals(31, $this->object->getUltimo(2014, 5)->format('j'));
    }

    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::isUltimo
     */
    public function testIsUltimo()
    {
        $this->assertEquals(true, $this->object->isUltimo('2014-02-28'));
        $this->assertEquals(false, $this->object->isUltimo('2016-02-28'));
        $this->assertEquals(true, $this->object->isUltimo('2016-02-29'));        
        $this->assertEquals(false, $this->object->isUltimo('2014-05-01'));
    }

   /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::calculateNewMonth
     */
    public function testCalculateNewMonth()
    {
       $this->assertEquals(5, $this->object->calculateNewMonth(10, 7));
       $this->assertEquals(12, $this->object->calculateNewMonth(1, 11));
    }

    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::calculateNewYear
     */
    public function testCalculateNewYear()
    {
        $this->assertEquals(2015, $this->object->calculateNewYear(2014, 10, 3));
        $this->assertEquals(2014, $this->object->calculateNewYear(2014, 10, 2));
    }
    
    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::accruedInterestFactor
     */
    public function testAccruedInterestFactorPeriod()
    {
        $dCM    = \MATHFINANCE_SWX_BOND_AI_GERMAN;
        $d1M1Y1 = '2013-12-31';
        $d2M2Y2 = '2014-03-31';
        $d3M3Y3 = '2014-03-31';
        $fValue = 4;
        $maturityDate = '2016-06-30';
        
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_SPEC_GERMAN;
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ENGLISH;
        $this->assertEquals(0.24657534246575341, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_FRENCH;
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_US;
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_YEAR;
        $this->assertEquals(0.24657534246575341, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_99N;
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_99U;
        $this->assertEquals(0.25, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_KENYA;
        $this->assertEquals(0.24657534246575341, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_CBK_KENYA;
        $this->assertEquals(0.24725274725274726, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
    }
    
    /**
     * @covers rhossis\mathfinance\MathFinance\abstractclass\Swx\BondAccruedInterest::accruedInterestFactor
     */
    public function testAccruedInterestFactorAnnual()
    {
        $dCM    = \MATHFINANCE_SWX_BOND_AI_GERMAN;
        $d1M1Y1 = '2015-12-31';
        $d2M2Y2 = '2016-06-30';
        $d3M3Y3 = '2016-12-31';
        $fValue = 1;
        $maturityDate = '2016-12-31';
        
        $this->assertEquals(0.5, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_SPEC_GERMAN;
        $this->assertEquals(0.5, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ENGLISH;
        $this->assertEquals(0.49863013698630138, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_FRENCH;
        $this->assertEquals(0.50555555555555554, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_US;
        $this->assertEquals(0.49722222222222223, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_YEAR;
        $this->assertEquals(0.49726775956284153, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_99N;
        $this->assertEquals(0.49726775956284153, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_ISMA_99U;
        $this->assertEquals(0.49726775956284153, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_KENYA;
        $this->assertEquals(0.49726775956284153, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
        
        $dCM = \MATHFINANCE_SWX_BOND_AI_CBK_KENYA;
        $this->assertEquals(0.5, $this->object->accruedInterestFactor($dCM, $d1M1Y1, $d2M2Y2, $d3M3Y3, $fValue, $maturityDate));
    }    
}
